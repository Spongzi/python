#整体成为“类”
# 个体为“对象”或者时“实例”

#定义类class 类名[(父类)]：
# 类体
class Car(object):
    pass
#代码里car类继承了object类，object是所有类的根，在python中(除object外)都间接的继承了object，直接继承object时部分代码可以省略
#pass语句只用于维持程序结构的完整。如果我们编程时若不想马上编写某些代码又不想有语法错误，就可以使用pass语句占位。


#创建对象
class Car(object):
    #类体
    pass
car = Car()
#car为刚刚创建的对象
#Car()创建一个小汽车对象，小括号表示调用构造方法，构造方法用于初始化对象


#类的成员
#类的成员包括了（成员变量，构造方法，成员方法，属性（property））
#成员变量包括（实例变量，类变量）
#成员方法（实例方法，类方法）
#成员变量也别称为数据成员，保存了类或者对象的数据，例如：学生的姓名和学号
#构造方法时一种特殊的函数，用于初始化类的成员变量
#成员方法时在类中定义的函数
#属性时对类进行封装而提供的特殊方法
#实例方法和实例变量属于对象，通过对象调用
#类变量和类方法属于类，通过类调用


#实例变量
#__init__()方法是构造方法
class Dog:
    def __init__(self,name,age):
        self.name = name #创建和初始化实例变量name
        self.age  = age #创建和初始化实例变量age
#类中的self是指当前对象
d = Dog("球球",2)#创建对象
print("我家狗狗的名字叫{0},{1}岁了".format(d.name,d.age))
#对实例变量通过”对象.实例变量“形式访问


class Dog:
    def __init__(self,name,age,sex='雄性'):#里面的雄性为默认值
        self.name = name #创建和初始化实例变量name
        self.age  = age #创建和初始化实例变量age
        self.sex  = sex #创建和初始化实例变量sex
#类中的self是指当前对象
d1 = Dog("球球",2)#创建对象
d2 = Dog("哈哈",1,"雌性")#创建对象
d3 = Dog(name="马富鹏",sex="雄性",age=19)#创建对象

print("我家狗狗的名字叫{0},{1}岁了{2}".format(d1.name,d1.age,d1.sex))
print("我家狗狗的名字叫{0},{1}岁了{2}".format(d2.name,d2.age,d2.sex))
print("我家狗狗的名字叫{0},{1}岁了{2}".format(d3.name,d3.age,d3.sex))



#实例方法
class Dog:
    def __init__(self,name,age,sex='雄性'):#里面的雄性为默认值
        self.name = name #创建和初始化实例变量name
        self.age  = age #创建和初始化实例变量age
        self.sex  = sex #创建和初始化实例变量sex
#类中的self是指当前对象
#在调用方法的时候不需要传入self
    #实例方法在类中定义
    #实例方法
    def run(self):
        print("{}在跑...".format(self.name))

    def speak(self , sound):
        print("{}再叫,'{}'! ".format(self.name,sound))


dog = Dog("球球", 2)  # 创建对象
dog.run()#在调用是采用”对象.实例方法“形式时，不需要传递参数
dog.speak("汪 ！ 汪 ！ 汪 ！")

#类变量
class Account:
    interest_rate = 0.0568#类变量利率   是属于所有账户实例共享的变量

    def __init__(self,owner,amount):
        self.owner = owner #创建并初始化实例对象
        self.amount = amount #创建并初始化实例对象

account = Account("Tony",8000000.0)
print("账户名：{0}".format(account.owner))
print("账户金额：{0}".format(account.amount))
print("利率：{0}".format(Account.interest_rate))#对类的引用”类名.类变量“形式访问


#类方法
class Account:
    interest_rate = 0.0568#类变量利率   是属于所有账户实例共享的变量

    def __init__(self,owner,amount):
        self.owner = owner #创建并初始化实例对象
        self.amount = amount #创建并初始化实例对象
#类方法
    @classmethod
    def interest_by(cls,amt):
#cls把名字类化，不用赋值，直接引用
        return cls.interest_rate*amt

interest = Account.interest_by(12000.0)
print("计算利息：{0:0.4}".format(interest))


#私有变量
#为了防止外部调用者随意存取类的内部数据(成员变量)，内部数据(成员变量)会被封装为“私有变量”
#私有变量在变量前加上双下划线__
class Account:
    __interest_rate = 0.0568#类变量利率 __interest_rate
    def __init__(self,owner,amount):
        self.owner = owner#创建并初始化公有实例变量owner
        self.__amount = amount#创建并初始化私有实例变量__amount

    def __get_info(self):
        return "{0}金额：{1}利率：{2}".format(self.owner,self.__amount,Account.__interest_rate)

#私有方法就想私有变量一样在方法前加上__
    def desc(self):
        print(self.__get_info())

#通过set(赋值)通过get(取值)方法访问私有变量
class Dog:
    #构造方法
    def __init__(self,name,age,sex = "雄性"):
        self.name = name
        self.__age = age
    def run(self):
        print("{0}在跑".format(self.name))
    #get方法
    def get_age(self):
        return self.__age
    #set方法
    def set_age(self,age):
        self.__age = age
dog = Dog("球球",2)
print("球球的年龄是{}".format(dog.get_age()))
dog.set_age(3)
print("球球的年龄修改后是{}".format(dog.get_age()))

#代码修改
class Dog:
    #构造方法
    def __init__(self,name,age,sex = "雄性"):
        self.name = name
        self.__age = age
    def run(self):
        print("{0}在跑".format(self.name))
    @property#get方法名就是属性使用@property修饰
    def age(self):#替代get_age(self):
        return self.__age
    @age.setter#age的set就是用@age.setter来修饰
    def age(self,age):#替代set_age(self,age):
        self.__age = age
dog = Dog("球球",2)
print("球球的年龄是{0}".format(dog.age))
dog.age = 3#dog.set_age(3)   访问属性值：“实例.属性”
print("球球的年龄修改后是{0}".format(dog.age))

#继承性
#在python中声明子类继承父类，定义时在类的后面使用一对小括号指定他的父类
class Animal:
    def __init__(self,name):
        self.name = name#实例变量name   初始化父类的实例成员变量
    def show_info(self):
        return "动物名字：{0}".format(self.name)
    def move(self):
        print("动一动")

class Cat(Animal):#定义子类猫Cat
    def __init__(self,name,age):
        super().__init__(name)#调用父类构造方法，初始化父类成员变量    def __init__(self,name):
        self.age = age#实例变量age    初始化子类的成员变量

cat = Cat("Tom",2)
cat.move()
print(cat.show_info())
#子类继承父类的时候，只有那些公有成员变量和方法才可以被继承下来

#当一个子类有多个父类的时候，子类优先继承左边的父类中的成员方法  从左到右的继承级别从高到低
class Horse:
    def __init__(self,name):
        self.name = name#实例变量name
    def show_info(self):
        return "马的名字：{0}".format(self.name)
    def run(self):
        print("马跑")

class Donkey:
    def __init__(self,name):
        self.name = name#实例变量name
    def show_info(self):
        return "驴的名字：{0}".format(self.name)
    def run(self):
        print("驴跑")
    def roll(self):
        print("驴打滚")

class Mule(Horse,Donkey):
    def __init__(self,name,age):
        super().__init__(name)
        self.age = age#实例变量age
m=Mule("骡宝莉",1)
m.run()#继承父类Horse
m.roll()#继承父类Donkey
print(m.show_info())#继承父类Horse

#方法重写
class Horse:
    def __init__(self,name):
        self.name = name#实例变量name
    def show_info(self):
        return "马的名字：{0}".format(self.name)
    def run(self):
        print("马跑")

class Donkey:
    def __init__(self,name):
        self.name = name#实例变量name
    def show_info(self):
        return "驴的名字：{0}".format(self.name)
    def run(self):
        print("驴跑")
    def roll(self):
        print("驴打滚")

class Mule(Horse,Donkey):
    def __init__(self,name,age):
        super().__init__(name)
        self.age = age#实例变量age
    def show_info(self):#当一个子类有多个父类时，可以进行方法重写
        return "骡：{0}，{1}岁".format(self.name,self.age)
m=Mule("骡宝莉",1)
m.run()#继承父类Horse
m.roll()#继承父类Donkey
print(m.show_info())#子类自己的方法

#多态性#
#如果多个子类继承父类，并重写父类方法后，这些子类所创建的对象之间就是多态的。这些对象采用不同的方法来实现父类方法
def start(obj):
    obj.speak
class Animal:
    def speak(self):
        print("动物叫，但是不知道时那种动物在叫")
class Dog(Animal):
    def speak(self):
        print("小狗：汪汪汪！")
class Cat(Animal):
    def speak(self):
        print("小猫：喵喵喵")
an1 = Dog()
an2 = Cat()
an1.speak()
an2.speak()


start(Cat())
start(Dog())
